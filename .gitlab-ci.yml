image: docker:17.05.0
stages:
  - Build
  - Package
  - Cross-Cloud

before_script:
  - apk update
  - apk add bash tar rsync git curl make file
  - echo "We are only going to build for amd64 for this demo"
  - sed -i -e '/ linux\/arm/ s/^/#/' hack/lib/golang.sh 
  - sed -i -e '/ linux\/s390/ s/^/#/' hack/lib/golang.sh 
  - sed -i -e '/ linux\/386/ s/^/#/' hack/lib/golang.sh 
  - sed -i -e '/ linux\/ppc64le/ s/^/#/' hack/lib/golang.sh 
  - sed -i -e '/ darwin\/amd64/ s/^/#/' hack/lib/golang.sh 
  - sed -i -e '/ darwin\/386/ s/^/#/' hack/lib/golang.sh 
  - sed -i -e '/ windows\/386/ s/^/#/' hack/lib/golang.sh 
  - sed -i -e '/ windows\/amd64/ s/^/#/' hack/lib/golang.sh 
  - export CI_COMMIT_SHA_SHORT=$(echo ${CI_COMMIT_SHA} | cut -c -8)

compile:
  stage: Build
  variables:
    KUBE_RELEASE_RUN_TESTS: "n"
    KUBE_FASTBUILD: "false"
    KUBE_VERBOSE: "0"
    FEDERATION: "false"
  script:
    - export KUBE_DOCKER_REGISTRY="${CI_REGISTRY_IMAGE}"
    - export KUBE_DOCKER_IMAGE_TAG="${CI_COMMIT_REF_SLUG}.${CI_COMMIT_SHA_SHORT}"
    - echo "${KUBE_DOCKER_IMAGE_TAG}"
    - ./build/release.sh
    - cp -a _output/dockerized/bin/linux/amd64 linux-amd64
    - echo export KUBELET_ARTIFACT=https://gitlab.cncf.ci/kubernetes/kubernetes/-/jobs/${CI_JOB_ID}/artifacts/raw/linux-amd64/kubelet >> release.env
    - cat release.env
  artifacts:
    name: "${CI_JOB_NAME}.${CI_PIPELINE_ID}.${CI_JOB_ID}"
    when: always
    expire_in: 1 weeks
    paths:
      - release.env
      - linux-amd64

container:
  stage: Package
  variables:
    KUBE_DOCKER_REGISTRY: "${CI_REGISTRY_IMAGE}"
    KUBE_DOCKER_IMAGE_TAG: "${CI_COMMIT_REF_SLUG}.${CI_PIPELINE_ID}.${CI_COMMIT_SHA_SHORT}"
  script:
    - export KUBE_DOCKER_REGISTRY="${CI_REGISTRY_IMAGE}"
    - export KUBE_DOCKER_IMAGE_TAG="${CI_COMMIT_REF_SLUG}.${CI_COMMIT_SHA_SHORT}"
    - echo "${KUBE_DOCKER_IMAGE_TAG}"
    - docker images | grep kubernetes/kubernetes
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker push "$CI_REGISTRY_IMAGE/hyperkube-amd64:$KUBE_DOCKER_IMAGE_TAG"
    - docker push "$CI_REGISTRY_IMAGE/kube-apiserver-amd64:$KUBE_DOCKER_IMAGE_TAG"
    - docker push "$CI_REGISTRY_IMAGE/kube-controller-manager-amd64:$KUBE_DOCKER_IMAGE_TAG"
    - docker push "$CI_REGISTRY_IMAGE/kube-scheduler-amd64:$KUBE_DOCKER_IMAGE_TAG"
    - docker push "$CI_REGISTRY_IMAGE/kube-proxy-amd64:$KUBE_DOCKER_IMAGE_TAG"
    - docker push "$CI_REGISTRY_IMAGE/kube-aggregator-amd64:$KUBE_DOCKER_IMAGE_TAG"
    - docker push "$CI_REGISTRY_IMAGE/cloud-controller-manager-amd64:$KUBE_DOCKER_IMAGE_TAG"
    - echo export KUBE_APISERVER_IMAGE="$CI_REGISTRY_IMAGE/kube-apiserver-amd64" >> release.env
    - echo export KUBE_APISERVER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export KUBE_CONTROLLER_MANAGER_IMAGE="$CI_REGISTRY_IMAGE/kube-controller-manager-amd64" >> release.env
    - echo export KUBE_CONTROLLER_MANAGER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export KUBE_SCHEDULER_IMAGE="$CI_REGISTRY_IMAGE/kube-scheduler-amd64" >> release.env
    - echo export KUBE_SCHEDULER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export KUBE_PROXY_IMAGE="$CI_REGISTRY_IMAGE/kube-proxy-amd64" >> release.env
    - echo export KUBE_PROXY_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export KUBE_AGGREGATOR_IMAGE="$CI_REGISTRY_IMAGE/kube-aggregator-amd64" >> release.env
    - echo export KUBE_AGGREGATOR_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export CLOUD_CONTROLLER_IMAGE="$CI_REGISTRY_IMAGE/cloud-controller-manager-amd64" >> release.env
    - echo export CLOUD_CONTROLLER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - cat release.env
  artifacts:
    name: "${CI_JOB_NAME}.${CI_PIPELINE_ID}.${CI_JOB_ID}"
    when: always
    expire_in: 1 weeks
    paths:
      - release.env

# Deploy Template used for Cross-Cloud API Call
.cross-cloud: &cross-cloud
  allow_failure: false
  image: buildpack-deps:stretch
  stage: Cross-Cloud
  # variables:
  #   KUBERNETES_BRANCH: MUST BE SET
  #   CLOUD: MUST BE SET
  script:
    - >
      if [ "$BUILD_TRIGGER" == "yes" ]; then
        exit 0
      else
        apt update && apt install -y jq
        PROJECT_PIPELINE=$(curl -X POST -F token=$CROSS_CLOUD_CI_JOB_TOKEN -F ref=stable-v0.2.0-integrations -F "variables[BRANCH]="${CLOUD_BRANCH}"" -F "variables[COMMIT]="${CLOUD_COMMIT}"" -F "variables[SOURCE]="${CI_PIPELINE_ID}"" -F "variables[DISABLE_SOURCE]="${CLOUD_DISABLE_SOURCE}"" -F "variables[ORG]=kubernetes" -F "variables[PROJECT]=kubernetes" -F "variables[PROJECT_ID]=14" -F "variables[PROJECT_TOKEN]="${KUBERNETES_PROJECT_TOKEN}"" -F "variables[CLOUD]="${CLOUD}"" https://gitlab.cncf.ci/api/v4/projects/2/trigger/pipeline | jq '.id')
        # PROJECT_PIPELINE=$(curl -X POST -F token=$CI_JOB_TOKEN -F ref=stable-v0.2.0-integrations https://gitlab.cncf.ci/api/v4/projects/2/trigger/pipeline | jq '.id')

        echo 'Wait for Cluster "FIX ME / HACK"'
        until [ "$JOB_STATUS" == '"success"' ]; do JOB_STATUS="$(curl -s --header "PRIVATE-TOKEN:${TOKEN}" "https://gitlab.cncf.ci/api/v4/projects/2/pipelines/${PROJECT_PIPELINE}/jobs?scope=success" | jq '.[] | select(.name=="Kubernetes-Deploy") | .status')" ; sleep 0.5 ; done ; echo 'Cluster Ready'
        PROJECT_JOB=$(curl --header "PRIVATE-TOKEN:${TOKEN}" "https://gitlab.cncf.ci/api/v4/projects/2/pipelines/${PROJECT_PIPELINE}/jobs?scope=success" | jq '.[] | select(.name=="Kubernetes-Deploy") | .id')
        export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
        curl -s -o kubeconfig -L "$BASE_URL/cncf/cross-cloud/-/jobs/${PROJECT_JOB}/artifacts/raw/data/$CLOUD-stable-v0-2-0-integrations/kubeconfig"
        cat ./kubeconfig | base64 | tee ./kubeconfig

      fi
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    expire_in: 5 weeks
    paths:
      - kubeconfig


# Cross-Cloud:
#   <<: *cross-cloud




